const redisClient = require("../config/redis");

const User = require("../models/userModel");
const Portfolio = require("../models/portfolioModel");
const Transaction = require("../models/transactionModel");

const getCryptoData = async (req, res) => {
  try {
    const cachedData = await redisClient.get("cryptoData");

    if (cachedData) {
      console.log("üì¶ Serving data from Redis cache");
      return res.status(200).json(JSON.parse(cachedData));
    } else {
      return res.status(404).json({ message: "No cached data available yet" });
    }
  } catch (error) {
    console.error("‚ùå Redis read error:", error.message);
    res.status(500).json({ message: "Failed to retrieve crypto data" });
  }
};

const buyCrypto = async (req, res) => {
  try {
    const userId = req.user.id; // –∏–¥-—Ç–æ –æ—Ç JWT middleware
    const { currency, amount, pricePerUnit } = req.body;

    console.log("Buy request body:", userId);
    if (!currency || !amount || !pricePerUnit) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    const totalCost = amount * pricePerUnit;

    // –í–∑–∏–º–∞–º–µ user-–∞
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "User not found" });

    // –í–∑–∏–º–∞–º–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ—Ç–æ
    let portfolio = await Portfolio.findOne({ userId });
    if (!portfolio) {
      // –ê–∫–æ –Ω—è–º–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - —Å—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤–æ —Å 0 USD –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–∞–∑–Ω–∞ –∫—Ä–∏–ø—Ç–æ –ª–∏—Å—Ç–∞
      portfolio = new Portfolio({ userId, usdBalance: 0, currencies: [] });
    }

    if (portfolio.usdBalance < totalCost) {
      return res.status(400).json({ message: "Insufficient USD balance" });
    }

    // –ò–∑–≤–∞–∂–¥–∞–º–µ –ø–∞—Ä–∏—Ç–µ
    portfolio.usdBalance -= totalCost;

    // –î–æ–±–∞–≤—è–º–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—É—Ç–∞—Ç–∞
    const existingCurrency = portfolio.currencies.find(
      (c) => c.name === currency
    );
    if (existingCurrency) {
      existingCurrency.amount += amount;
    } else {
      portfolio.currencies.push({ name: currency, amount });
    }

    await portfolio.save();

    // –ó–∞–ø–∏—Å–≤–∞–º–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    const transaction = new Transaction({
      userId,
      type: "buy",
      currency: currency,
      amount,
      pricePerUnit,
      total: totalCost,
    });
    await transaction.save();

    res.status(200).json({
      message: "Crypto purchased successfully",
      usdBalance: portfolio.usdBalance,
      portfolio: portfolio.currencies,
    });
  } catch (error) {
    console.error("Buy crypto error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

const sellCrypto = async (req, res) => {
  try {
    const userId = req.user.id; // –≤–∑–∏–º–∞–º–µ userId –æ—Ç middleware-–∞
    const { currency, amount, pricePerUnit } = req.body;

    if (!currency || !amount || !pricePerUnit) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    const totalGain = amount * pricePerUnit;

    // –í–∑–∏–º–∞–º–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ—Ç–æ
    const portfolio = await Portfolio.findOne({ userId });
    if (!portfolio)
      return res.status(404).json({ message: "Portfolio not found" });

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç –∫—Ä–∏–ø—Ç–æ—Ç–æ –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞
    const existingCurrency = portfolio.currencies.find(
      (c) => c.name === currency
    );
    if (!existingCurrency || existingCurrency.amount < amount) {
      return res
        .status(400)
        .json({ message: "Insufficient cryptocurrency amount" });
    }

    // –ù–∞–º–∞–ª—è–≤–∞–º–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ç–æ
    existingCurrency.amount -= amount;

    // –ê–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ —Å—Ç–∞–Ω–µ 0 –∏–ª–∏ –ø–æ-–º–∞–ª–∫–æ, –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –∫—Ä–∏–ø—Ç–æ—Ç–æ –æ—Ç –ª–∏—Å—Ç–∞—Ç–∞
    if (existingCurrency.amount <= 0) {
      portfolio.currencies = portfolio.currencies.filter(
        (c) => c.name !== currency
      );
    }

    // –î–æ–±–∞–≤—è–º–µ USD –∫—ä–º –±–∞–ª–∞–Ω—Å–∞
    portfolio.usdBalance += totalGain;

    await portfolio.save();

    // –ó–∞–ø–∏—Å–≤–∞–º–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    const transaction = new Transaction({
      userId,
      type: "sell",
      currency,
      amount,
      pricePerUnit,
      total: totalGain,
    });
    await transaction.save();

    res.status(200).json({
      message: "Crypto sold successfully",
      usdBalance: portfolio.usdBalance,
      portfolio: portfolio.currencies,
    });
  } catch (error) {
    console.error("Sell crypto error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

module.exports = { getCryptoData, buyCrypto, sellCrypto };
